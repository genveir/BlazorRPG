@inherits DisposableComponent

@page "/"
@inject IJSRuntime jsRunTime
@inject Player player

<img src="assets/spritesheet.png" height="1280" width="1280" hidden @ref="_spriteSheet"/>

<div id="canvas-container" tabindex="0" @onkeydown="KeyDown" @onkeyup="KeyUp">
    <BECanvas @ref="_canvasReference"></BECanvas>
</div>

@code {
    private CanvasView view;

    private bool isConnected = true;

    public override void Dispose() => isConnected = false;

    protected Blazor.Extensions.BECanvasComponent _canvasReference;
    protected ElementReference _spriteSheet;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Game.Subscribe(player);

#pragma warning disable CS4014 // I 'want' this method to continue without waiting.
            Task.Run(() => TouchLoop());
#pragma warning restore CS4014

            var context = await this._canvasReference.CreateCanvas2DAsync();

            var testSheet = new TestSheet(_spriteSheet);
            this.view = new CanvasView(player, context, testSheet);

            await jsRunTime.InvokeAsync<object>("setup", DotNetObjectReference.Create(this));
        }
    }

    private async Task TouchLoop()
    {
        while (isConnected)
        {
            player.Touch();

            await Task.Delay(1000);
        }
    }

    protected void KeyUp(KeyboardEventArgs e)
    {
        
    }

    protected void KeyDown(KeyboardEventArgs e)
    {
        
    }

    [JSInvokable]
    public async ValueTask RenderFrame(int viewWidth, int viewHeight)
    {
        await this.view.RenderFrame(viewWidth, viewHeight);
    }
}
